# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dyTNHFP0pCXBtGnnJGyyU3nCVucvmz5A
"""

import streamlit as st
import pandas as pd # Not strictly needed, but good practice for data-related apps

# --- Configuration and Initial Setup ---

# Set up the page (Stage 6 Hint)
st.set_page_config(
    page_title="WaterBuddy: Your Daily Hydration Companion",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# Friendly colours and theme (Stage 6 Hint)
st.markdown(
    """
    <style>
    .reportview-container {
        background: #F0F8FF; /* Light blue/aqua background */
    }
    .stProgress > div > div > div > div {
        background-color: #1E90FF; /* Dodger Blue for the fill */
    }
    h1 {
        color: #008B8B; /* Dark Cyan for heading */
        text-align: center;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# --- Hydration Logic (Stage 4 & 5) ---

# Recommended Daily Goals (in ml) based on age (Compulsory Feature)
# Simplified, age-aware goals as suggested in the task
AGE_GOALS = {
    "6-12 Years (Child)": 1600,
    "13-18 Years (Teen)": 2300,
    "19-50 Years (Adult)": 2500,
    "51-64 Years (Older Adult)": 2200,
    "65+ Years (Senior)": 2000
}

# Initialize session state for live data storage (Stage 4 Hint)
if 'total_intake' not in st.session_state:
    st.session_state.total_intake = 0
if 'daily_goal' not in st.session_state:
    # Set a sensible default goal
    st.session_state.daily_goal = AGE_GOALS["19-50 Years (Adult)"]
# --- NEW LINE ADDED ---
if 'age_selector' not in st.session_state:
    st.session_state.age_selector = "19-50 Years (Adult)" # Use the default option
# ----------------------

def update_goal(age_group):
    """Updates the goal based on the selected age group."""
    st.session_state.daily_goal = AGE_GOALS[age_group]
    # Reset intake when goal changes (optional, but good UX)
    # st.session_state.total_intake = 0

def log_water(amount):
    """Adds water to the total intake (Compulsory Feature)."""
    st.session_state.total_intake += amount
    # Ensure intake doesn't exceed 10,000 ml just in case
    if st.session_state.total_intake > 10000:
        st.session_state.total_intake = 10000

def reset_progress():
    """Resets the intake for a new day (Compulsory Feature)."""
    st.session_state.total_intake = 0
    st.toast("Progress reset! Start a fresh day. üíß") # Live feedback

# --- Interface Setup (Stage 6) ---

st.title("WaterBuddy üíß")
st.header("Your Daily Hydration Companion")

# --- Section 1: Goal Setting (Compulsory Interface Section) ---

st.subheader("1. Set Your Daily Goal")

# Let users select their age group (st.selectbox - Stage 4 Hint)
age_group = st.selectbox(
    "Select your age group to get a recommended goal:",
    options=list(AGE_GOALS.keys()),
    index=list(AGE_GOALS.keys()).index("19-50 Years (Adult)"),
    key="age_selector",
    on_change=update_goal,
    args=(st.session_state.age_selector,) # Pass the current selection to the update function
)

# Show auto-suggested daily goal (Compulsory Feature)
st.info(f"Recommended daily intake for your group is **{AGE_GOALS[age_group]} ml**.")

# Option to manually adjust the goal (st.number_input - Compulsory Feature)
manual_goal = st.number_input(
    "Or, manually set your goal (in ml):",
    min_value=500,
    max_value=5000,
    value=st.session_state.daily_goal,
    step=100,
    key="manual_goal_input"
)
st.session_state.daily_goal = manual_goal


st.markdown("---") # Separator

# --- Section 2: Logging Intake (Compulsory Interface Section) ---

st.subheader("2. Log Your Water")

# Use st.columns to group the log button neatly (Stage 6 Hint)
col_log, col_reset = st.columns([1.5, 1])

with col_log:
    # Quick log button (+250ml) (st.button - Compulsory Feature)
    if st.button("Log +250 ml", type="primary"):
        log_water(250)
        st.rerun() # Rerun to update visuals instantly

with col_reset:
    # Reset button (Compulsory Feature)
    if st.button("Reset Progress", type="secondary"):
        reset_progress()
        st.experimental_rerun() # Rerun to update visuals instantly

# --- Section 3: Progress & Feedback (Compulsory Interface Section) ---

st.subheader("3. Your Progress Today")

# Compute calculations (Stage 5 Compulsory)
percentage_achieved = min(100, (st.session_state.total_intake / st.session_state.daily_goal) * 100)
remaining_water = max(0, st.session_state.daily_goal - st.session_state.total_intake)

st.metric(
    label=f"Goal: {st.session_state.daily_goal} ml",
    value=f"{st.session_state.total_intake} ml logged",
    delta=f"{remaining_water} ml to go!"
)

# Display a real-time progress bar (Compulsory Visual)
st.progress(percentage_achieved / 100)

# Trigger a motivational message or mascot reaction (Compulsory Visual)
st.write("### WaterBuddy's Live Feedback")

if percentage_achieved == 0:
    st.markdown("üëã **Hello!** Let's start sipping and reach that goal.")
elif percentage_achieved < 25:
    st.markdown("üíß **Good start!** Every sip counts.")
elif percentage_achieved < 50:
    st.markdown("üí™ **Halfway there!** You're building a great habit!")
elif percentage_achieved < 75:
    st.markdown("üåü **Almost there!** Keep going for the final push.")
elif percentage_achieved < 100:
    st.balloons()
    st.markdown("ü•≥ **Great job!** You've nearly hit your goal!")
elif percentage_achieved >= 100:
    st.balloons()
    st.success("üèÜ **GOAL ACHIEVED!** Excellent hydration today, WaterBuddy is proud!")
